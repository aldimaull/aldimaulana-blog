---
export type Props = {
 pageHeadings: Array<{ depth: number; text: string; slug: string }>;
};

const { pageHeadings } = Astro.props;
---

<aside id="toc">
 <p>Table of Contents</p>
 <ul>
  {
   pageHeadings.map((h) => {
    return (
     <li>
      {" "}
      <a href={`#${h.slug}`}>{h.text}</a>
     </li>
    );
   })
  }
 </ul>
</aside>

<script>
 const setCurrentHeading = (entries: IntersectionObserverEntry[]) => {
  for (let entry of entries) {
   const { id } = entry.target;
   const tocLinkEl = document.querySelector(`#toc a[href='#${id}']`);
   if (!tocLinkEl) return;
   if (entry.isIntersecting) {
    document
     .querySelectorAll("#toc a")
     .forEach((e) => e.classList.remove("active"));
    tocLinkEl.classList.add("active");
   }
  }
 };
 console.log(setCurrentHeading);
 const observerOptions = {
  threshold: 1,
  rootMargin: "0px 0px -66%",
 };

 const observer = new IntersectionObserver(setCurrentHeading, observerOptions);
 // select all headings to observe
 const elToObserve = document.querySelectorAll(
  "article :is(h1,h2,h3,h4,h5,h6)"
 );
 // finally, observe the elements
 elToObserve.forEach((el) => observer.observe(el));
</script>

<style>
 #toc {
  @apply md:sticky md:top-0 md:right-0 md:text-sm md:p-4 md:mx-auto;
 }
 s ul {
  list-style: none;
 }
 a {
  @apply text-neutral-40 dark:text-neutral-80;
  text-decoration: none;
 }
 a.active {
  @apply text-tertiary-40 dark:text-tertiary-80;
  font-weight: 500;
 }

 p {
  @apply text-primary-40 dark:text-primary-80 font-extrabold;
 }
</style>
